(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["trees"],{"01b7":function(t,e,n){},"1e93":function(t,e,n){"use strict";n.r(e);var s=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"d-flex justify-center pa-8"},[n("div",{staticClass:"tree-container"},[n("h1",{staticClass:"headline mb-2"},[t._v("Running XGBoost / LightGBM models")]),n("p",[t._v(" tractjs can now run Decision Tree Classifiers and Regressors! This demo shows how to export the models to ONNX and run them on the client-side in your browser via WASM through tractjs. ")]),t._m(0),n("v-simple-table",{staticClass:"mb-4",attrs:{dense:""},scopedSlots:t._u([{key:"default",fn:function(){return[n("thead",[n("tr",t._l(t.columns,(function(e){return n("th",{key:e,staticClass:"text-left"},[t._v(" "+t._s(e)+" ")])})),0)]),n("tbody",[n("tr",t._l(t.sample,(function(e,s){return n("td",{key:s},[n("v-text-field",{attrs:{"hide-details":"","single-line":"",type:"number"},model:{value:t.sample[s],callback:function(e){t.$set(t.sample,s,e)},expression:"sample[i]"}})],1)})),0)])]},proxy:!0}])}),n("h4",[t._v("Prediction (LightGBM tree):")]),n("v-simple-table",{staticClass:"mb-16",attrs:{dense:""},scopedSlots:t._u([{key:"default",fn:function(){return[null!=t.output?n("thead",[n("tr",t._l(Object.keys(t.output),(function(e){return n("th",{key:e,staticClass:"text-left"},[t._v(" "+t._s(e)+" ")])})),0)]):t._e(),null!=t.output?n("tbody",[n("tr",t._l(Object.values(t.output).map((function(t,e){return[t,e]})),(function(e){var s=e[0],o=e[1];return n("td",{key:o},[t._v(" "+t._s(Math.round(1e3*s)/1e3)+" ")])})),0)]):t._e()]},proxy:!0}])}),n("v-row",{staticClass:"align-center mt-12"},[n("v-col",[n("h2",[t._v("Using classifiers")])]),n("v-spacer"),n("v-col",{staticClass:"pb-0",attrs:{md:"2"}},[n("v-select",{attrs:{height:"3em",items:Object.keys(t.classifierUsage),label:"Framework"},scopedSlots:t._u([{key:"item",fn:function(e){return[t._v(" "+t._s(e.item)+" ")]}},{key:"selection",fn:function(e){return[t._v(" "+t._s(e.item)+" ")]}}]),model:{value:t.selected,callback:function(e){t.selected=e},expression:"selected"}})],1)],1),n("markdown-it-vue",{attrs:{content:t.classifierUsage[t.selected]["code"]}}),n("markdown-it-vue",{staticClass:"mt-4",attrs:{content:t.classifierMd}}),n("v-row",{staticClass:"align-center mt-12"},[n("v-col",[n("h2",[t._v("Using regressors")])]),n("v-spacer"),n("v-col",{staticClass:"pb-0",attrs:{md:"2"}},[n("v-select",{attrs:{height:"3em",items:Object.keys(t.regressorUsage),label:"Framework"},scopedSlots:t._u([{key:"item",fn:function(e){return[t._v(" "+t._s(e.item)+" ")]}},{key:"selection",fn:function(e){return[t._v(" "+t._s(e.item)+" ")]}}]),model:{value:t.selected,callback:function(e){t.selected=e},expression:"selected"}})],1)],1),n("markdown-it-vue",{attrs:{content:t.regressorUsage[t.selected]["code"]}}),n("markdown-it-vue",{staticClass:"mt-4",attrs:{content:t.regressorMd}}),t._m(1)],1)])},o=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("h4",[t._v(" Input (from the "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Iris_flower_data_set"}},[t._v("Iris dataset")]),t._v("): ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v(" Tested with: "),n("pre",[t._v("  xgboost==1.3.1\n  onnx==1.8.0\n  onnxmltools==1.7.0\n  scikit-learn==0.23.2\n  lightgbm==3.1.1\n  hummingbird-ml==0.2.1\n  torch==1.7.0\n      ")])])}],a=(n("a630"),n("d81d"),n("c1f9"),n("d3b7"),n("ac1f"),n("3ca3"),n("5319"),n("cfc3"),n("9a8c"),n("a975"),n("735e"),n("c1ac"),n("d139"),n("3a7b"),n("d5d6"),n("82f8"),n("e91f"),n("60bd"),n("5f96"),n("3280"),n("3fcc"),n("ca91"),n("25a1"),n("cd26"),n("3c5d"),n("2954"),n("649e"),n("219c"),n("170b"),n("b39a"),n("72f7"),n("96cf"),n("1da1")),r=n("f35a"),i='XGBoost models can be exported to ONNX via [onnxmltools](https://github.com/onnx/onnxmltools):\n\n```python\nimport numpy as np\nimport onnx\nimport onnxmltools\nfrom onnxmltools.convert.common import data_types\nfrom sklearn import datasets\nfrom xgboost.sklearn import XGBClassifier\n\n# load a sample dataset\nx, y = datasets.load_iris(return_X_y=True)\nx = x.astype(np.float32)\n\n# fit the model\nmodel = XGBClassifier(n_estimators=10, use_label_encoder=False)\nmodel.fit(x, y)\n\n# export to ONNX\nonnx_model = onnxmltools.convert_xgboost(\n    model, initial_types=[("input", data_types.FloatTensorType([None, x.shape[1]]))],\n)\nonnx.save(onnx_model, "model.onnx")\n```\n',l='LightGBM models can be exported to ONNX via [hummingbird](https://github.com/microsoft/hummingbird):\n\n```python\nimport numpy as np\nfrom sklearn import datasets\nfrom lightgbm.sklearn import LGBMClassifier\nfrom hummingbird.ml import convert\nimport onnxruntime\nimport torch\n\n# load a sample dataset\nx, y = datasets.load_iris(return_X_y=True)\nx = x.astype(np.float32)\n\n# fit the model\nmodel = LGBMClassifier(n_estimators=10)\nmodel.fit(x, y)\n\npytorch_model = convert(model, "pytorch")\n\n# export to ONNX\ntorch.onnx.export(\n    pytorch_model.model,\n    (torch.from_numpy(x)),\n    "model.onnx",\n    input_names=["input"],\n    output_names=["output", "probabilities"],\n    dynamic_axes={\n        "input": {0: "batch"},\n        "output": {0: "batch"},\n        "probabilities": {0: "batch"},\n    },\n)\n```\n',c='And then loaded and run in tractjs:\n\n```javascript\nlet model = await tractjs.load("model.onnx", {\n    inputFacts: {\n        0: ["float32", ["s", 4]],\n    },\n    outputs: ["probabilities"],\n});\nlet input = new tractjs.Tensor(new Float32Array([5.1, 3.5, 1.4, 0.2], [1, 4]))\nlet preds = await model.predict([input]);\n```',d="XGBoost Regressors via `onnxmltools` are not yet supported in tractjs.",m='LightGBM models can be exported to ONNX via [hummingbird](https://github.com/microsoft/hummingbird):\n\n```python\nimport torch\nfrom hummingbird.ml import convert\nfrom lightgbm.sklearn import LGBMRegressor\nfrom sklearn import datasets\n\n# load a sample dataset\nx, y = datasets.load_boston(return_X_y=True)\n\n# fit the model\nmodel = LGBMRegressor(n_estimators=10)\nmodel.fit(x, y)\n\npytorch_model = convert(model, "pytorch")\n\n# export to ONNX\ntorch.onnx.export(\n    pytorch_model.model,\n    (torch.from_numpy(x)),\n    "model.onnx",\n    input_names=["input"],\n    output_names=["variable"],\n    dynamic_axes={"input": {0: "batch"}, "variable": {0: "batch"}},\n)\n```\n\n\nAnd then loaded and run in tractjs:\n\n```javascript\nlet model = await tractjs.load("model.onnx", {\n    inputFacts: {\n        0: ["float32", ["s", 13]],\n    },\n});\nlet input = new tractjs.Tensor(new Float32Array([0.00632, 18.0, 2.31, 0.0, 0.538, 6.575, 65.2, 4.09, 1.0, 296.0, 15.3, 396.9, 4.98]), [1, 13]);\nlet preds = await model.predict([input]);\n```',u="";n("2c43");function p(t){return window.location.href.replace(/\/$/,"")+"/"+t}var h={name:"Trees",data:function(){return{columns:["sepal length (cm)","sepal width (cm)","petal length (cm)","petal width (cm)"],labelNames:["setosa","versicolor","virginica"],sample:[5.1,3.5,1.4,.2].map((function(t){return Math.round(100*t)/100})),model:null,output:null,selected:"LightGBM",classifierUsage:{LightGBM:{code:l},XGBoost:{code:i}},classifierMd:c,regressorUsage:{LightGBM:{code:m},XGBoost:{code:d}},regressorMd:u}},created:function(){var t=this;this.model=r["b"](p("model.onnx"),{inputFacts:{0:["float32",["s",this.columns.length]]},outputs:["probabilities"]}),this.model.then((function(e){t.predict(e)}))},watch:{sample:{handler:function(){var t=Object(a["a"])(regeneratorRuntime.mark((function t(){var e;return regeneratorRuntime.wrap((function(t){while(1)switch(t.prev=t.next){case 0:return t.next=2,this.model;case 2:e=t.sent,this.predict(e);case 4:case"end":return t.stop()}}),t,this)})));function e(){return t.apply(this,arguments)}return e}()}},methods:{predict:function(t){var e=this;return Object(a["a"])(regeneratorRuntime.mark((function n(){var s,o;return regeneratorRuntime.wrap((function(n){while(1)switch(n.prev=n.next){case 0:return s=new r["a"](new Float32Array(e.sample),[1,e.columns.length]),n.next=3,t.predict([s]);case 3:o=n.sent,e.output=Object.fromEntries(Array.from(o[0].data).map((function(t,n){return[e.labelNames[n],t]})));case 5:case"end":return n.stop()}}),n)})))()}}},f=h,b=(n("7296"),n("2877")),v=n("6544"),_=n.n(v),g=n("62ad"),x=n("0fd9"),y=n("b974"),w=(n("a9e3"),n("5530")),k=(n("8b37"),n("80d2")),j=n("7560"),C=n("58df"),B=Object(C["a"])(j["a"]).extend({name:"v-simple-table",props:{dense:Boolean,fixedHeader:Boolean,height:[Number,String]},computed:{classes:function(){return Object(w["a"])({"v-data-table--dense":this.dense,"v-data-table--fixed-height":!!this.height&&!this.fixedHeader,"v-data-table--fixed-header":this.fixedHeader},this.themeClasses)}},methods:{genWrapper:function(){return this.$slots.wrapper||this.$createElement("div",{staticClass:"v-data-table__wrapper",style:{height:Object(k["d"])(this.height)}},[this.$createElement("table",this.$slots.default)])}},render:function(t){return t("div",{staticClass:"v-data-table",class:this.classes},[this.$slots.top,this.genWrapper(),this.$slots.bottom])}}),O=n("2fa4"),G=n("8654"),M=Object(b["a"])(f,s,o,!1,null,null,null);e["default"]=M.exports;_()(M,{VCol:g["a"],VRow:x["a"],VSelect:y["a"],VSimpleTable:B,VSpacer:O["a"],VTextField:G["a"]})},"2c43":function(t,e,n){},7296:function(t,e,n){"use strict";var s=n("01b7"),o=n.n(s);o.a},"8b37":function(t,e,n){},c1f9:function(t,e,n){var s=n("23e7"),o=n("2266"),a=n("8418");s({target:"Object",stat:!0},{fromEntries:function(t){var e={};return o(t,(function(t,n){a(e,t,n)}),void 0,!0),e}})}}]);
//# sourceMappingURL=trees.e83a2a44.js.map